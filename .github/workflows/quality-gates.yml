name: Quality Gates

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "9.5.0"

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ESLint
        run: pnpm lint

      - name: TypeScript
        run: pnpm typecheck

      - name: Format check
        run: pnpm format:check

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test:ci

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: env.CODECOV_TOKEN != ''
        with:
          files: ./packages/*/coverage/lcov.info
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./services/api

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_forms
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: services/api/requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          python -m pytest -xvs --cov=. --cov-report=xml --cov-report=term
        env:
          DJANGO_SETTINGS_MODULE: api.settings_test
          POSTGRES_URL: "postgresql://postgres:postgres@localhost:5432/test_forms"
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_forms"
          REDIS_URL: "redis://localhost:6379/0"
          SECRET_KEY: "test-secret-key-for-ci"
          JWT_SECRET: "test-jwt-secret"
          HMAC_SECRET: "test-hmac-secret"

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: env.CODECOV_TOKEN != ''
        with:
          file: ./services/api/coverage.xml
          flags: backend
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm build

      - name: Start services
        run: |
          # Start webhook receiver
          pnpm webhook:start &
          WEBHOOK_PID=$!

          # Start frontend apps
          pnpm --filter @forms/marketing dev &
          MARKETING_PID=$!

          pnpm --filter @forms/builder dev &
          BUILDER_PID=$!

          # Store PIDs for cleanup
          echo $WEBHOOK_PID > webhook.pid
          echo $MARKETING_PID > marketing.pid
          echo $BUILDER_PID > builder.pid

          # Wait for services with retries
          echo "Waiting for services to start..."
          for i in {1..30}; do
            WEBHOOK_OK=$(curl -sf http://localhost:9000/health >/dev/null 2>&1 && echo "true" || echo "false")
            MARKETING_OK=$(curl -sf http://localhost:3000 >/dev/null 2>&1 && echo "true" || echo "false")
            BUILDER_OK=$(curl -sf http://localhost:3001 >/dev/null 2>&1 && echo "true" || echo "false")
            
            if [[ "$WEBHOOK_OK" == "true" && "$MARKETING_OK" == "true" && "$BUILDER_OK" == "true" ]]; then
              echo "‚úÖ All services are ready!"
              break
            fi
            
            echo "Attempt $i/30: Webhook=$WEBHOOK_OK Marketing=$MARKETING_OK Builder=$BUILDER_OK"
            sleep 2
          done

          # Final check
          curl -f http://localhost:9000/health || (echo "‚ùå Webhook receiver not ready" && exit 1)
          curl -f http://localhost:3000 || (echo "‚ùå Marketing app not ready" && exit 1)
          curl -f http://localhost:3001 || (echo "‚ùå Builder app not ready" && exit 1)
        env:
          CI: true
          NODE_ENV: test

      - name: Run E2E tests
        run: pnpm exec playwright test e2e/simple-form.spec.ts --config=playwright-ci.config.ts
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0
          CI: true

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  performance:
    name: Performance Budgets
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build runtime packages
        run: pnpm build --filter=@forms/runtime

      - name: Check bundle size
        run: pnpm test:perf
        continue-on-error: false

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('bundle-analysis.json', 'utf8'));
              const comment = `## üìä Bundle Size Report
              
              | Package | Size | Gzipped | Status |
              |---------|------|---------|---------|
              ${report.packages.map(pkg => 
                `| \`${pkg.name}\` | ${pkg.size} | ${pkg.gzipped} | ${pkg.status === 'pass' ? '‚úÖ' : '‚ùå'} |`
              ).join('\n')}
              
              **Runtime Bundle**: ${report.runtime.size} (limit: 30KB gzipped)
              **Embed Script**: ${report.embed.size} (limit: 5KB gzipped)
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (e) {
              console.log('No bundle analysis found');
            }

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm build

      - name: Start applications
        run: |
          # Start apps in background
          pnpm --filter @forms/marketing dev &
          MARKETING_PID=$!

          pnpm --filter @forms/builder dev &
          BUILDER_PID=$!

          # Wait for apps with retries
          echo "Waiting for applications to start..."
          for i in {1..30}; do
            MARKETING_OK=$(curl -sf http://localhost:3000 >/dev/null 2>&1 && echo "true" || echo "false")
            BUILDER_OK=$(curl -sf http://localhost:3001 >/dev/null 2>&1 && echo "true" || echo "false")
            
            if [[ "$MARKETING_OK" == "true" && "$BUILDER_OK" == "true" ]]; then
              echo "‚úÖ Applications are ready!"
              break
            fi
            
            echo "Attempt $i/30: Marketing=$MARKETING_OK Builder=$BUILDER_OK"
            sleep 2
          done

          # Final check
          curl -f http://localhost:3000 || (echo "‚ùå Marketing app not ready" && exit 1)
          curl -f http://localhost:3001 || (echo "‚ùå Builder app not ready" && exit 1)
        env:
          CI: true
          NODE_ENV: test

      - name: Run accessibility tests
        run: pnpm test:a11y

      - name: Upload A11Y results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: a11y-results/
          retention-days: 7

  contracts:
    name: Contract Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run contract tests
        run: pnpm test:contracts

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      # Skip CodeQL - code scanning not enabled
      # - name: Initialize CodeQL
      #   if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: javascript,typescript
      #     queries: security-extended

      # - name: Autobuild
      #   if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      #   uses: github/codeql-action/autobuild@v3

      # - name: Perform CodeQL Analysis
      #   if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      #   uses: github/codeql-action/analyze@v3

  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs:
      [
        quality,
        test-frontend,
        test-backend,
        test-e2e,
        performance,
        accessibility,
        contracts,
        security,
      ]
    if: always()

    steps:
      - name: Check job results
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "‚ùå One or more quality gates failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "‚èπÔ∏è One or more quality gates were cancelled"
            exit 1
          else
            echo "‚úÖ All quality gates passed - ready for deployment!"
          fi
