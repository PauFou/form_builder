#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Pre-commit hook with comprehensive checks

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo ""
echo -e "${BLUE}üîç PRE-COMMIT VALIDATION${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo ""

# Stage 1: lint-staged for formatting
echo -e "${YELLOW}Stage 1: Format staged files${NC}"
pnpm lint-staged
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå lint-staged failed!${NC}"
    exit 1
fi

# Stage 2: Quick quality checks on staged files
echo -e "\n${YELLOW}Stage 2: Quality checks${NC}"

# Get list of staged TypeScript/JavaScript files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$' || true)

if [ -n "$STAGED_FILES" ]; then
    # Run ESLint on staged files only
    echo "‚Üí ESLint on staged files..."
    echo "$STAGED_FILES" | xargs ./node_modules/.bin/eslint --max-warnings 0
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå ESLint failed! Fix errors before committing.${NC}"
        echo "Run: pnpm lint"
        exit 1
    fi
    
    # Check for any leftover console.log statements
    echo "‚Üí Checking for console.log..."
    if echo "$STAGED_FILES" | xargs grep -l "console\.log" | grep -v ".test." | grep -v ".spec." | grep -v "scripts/"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: console.log found in staged files${NC}"
        echo "Remove or replace with proper logging"
    fi
    
    # Check for any type errors in staged files
    echo "‚Üí TypeScript check on staged files..."
    if ! pnpm typecheck > /dev/null 2>&1; then
        echo -e "${RED}‚ùå TypeScript errors found!${NC}"
        echo "Run: pnpm typecheck"
        exit 1
    fi
fi

# Stage 3: Run quick unit tests (if configured)
if [ "$SKIP_TESTS" != "true" ] && [ -n "$STAGED_FILES" ]; then
    echo -e "\n${YELLOW}Stage 3: Quick tests${NC}"
    
    # Find test files related to staged files
    TEST_FILES=""
    for file in $STAGED_FILES; do
        # Look for corresponding test files
        base="${file%.*}"
        for ext in ".test.ts" ".test.tsx" ".spec.ts" ".spec.tsx" ".test.js" ".test.jsx"; do
            test_file="${base}${ext}"
            if [ -f "$test_file" ]; then
                TEST_FILES="$TEST_FILES $test_file"
            fi
        done
    done
    
    if [ -n "$TEST_FILES" ]; then
        echo "‚Üí Running tests for changed files..."
        NODE_ENV=test npx jest $TEST_FILES --passWithNoTests
        if [ $? -ne 0 ]; then
            echo -e "${RED}‚ùå Tests failed!${NC}"
            echo "Fix failing tests before committing"
            exit 1
        fi
    fi
fi

# Stage 4: Check commit size
echo -e "\n${YELLOW}Stage 4: Commit size check${NC}"
CHANGED_LINES=$(git diff --cached --numstat | awk '{ added += $1; deleted += $2 } END { print added + deleted }')
if [ "$CHANGED_LINES" -gt 1000 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Large commit detected (${CHANGED_LINES} lines)${NC}"
    echo "Consider splitting into smaller, focused commits"
    read -p "Continue anyway? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Stage 5: Security checks
echo -e "\n${YELLOW}Stage 5: Security checks${NC}"
# Check for potential secrets
if git diff --cached --name-only | xargs grep -E "(password|secret|token|api[_-]key)" -i | grep -v -E "(.env.example|CLAUDE.md|README|test|spec|mock)" | grep -v "^#"; then
    echo -e "${RED}‚ùå Potential secrets detected!${NC}"
    echo "Review the above lines and ensure no real secrets are committed"
    read -p "I've reviewed and confirm no secrets (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo ""
echo -e "${GREEN}‚úÖ Pre-commit checks passed!${NC}"
echo ""