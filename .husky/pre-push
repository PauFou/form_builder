#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Hook pre-push - S'assure que tous les tests passent avant le push
# C'est la porte finale - si ça passe, le code est prêt

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo ""
echo -e "${CYAN}🚀 PRE-PUSH VALIDATION${NC}"
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo "This is the final quality gate before pushing to the repository"
echo ""

# Check if we should skip tests
if [ "$SKIP_TESTS" == "true" ] || [ "$FORCE_PUSH" == "true" ]; then
    echo -e "${YELLOW}⚠️  Tests contournés (SKIP_TESTS ou FORCE_PUSH activé)${NC}"
    echo "Utiliser avec précaution!"
    exit 0
fi

# Function to show progress
show_progress() {
    local current=$1
    local total=$2
    local percent=$((current * 100 / total))
    printf "\rProgress: [%-20s] %d%%" $(printf '#%.0s' $(seq 1 $((percent / 5)))) $percent
}

# Total steps
TOTAL_STEPS=8
CURRENT_STEP=0

# Step 1: Check for uncommitted changes
CURRENT_STEP=$((CURRENT_STEP + 1))
echo -e "\n${BLUE}[$CURRENT_STEP/$TOTAL_STEPS] Vérification des changements non commités...${NC}"
if ! git diff --quiet || ! git diff --staged --quiet; then
    echo -e "${RED}❌ Changements non commités détectés!${NC}"
    echo "Veuillez commiter ou stash vos changements avant de pousser"
    git status --short
    exit 1
fi
echo -e "${GREEN}✓ Répertoire de travail propre${NC}"

# Step 2: Quick syntax checks
CURRENT_STEP=$((CURRENT_STEP + 1))
echo -e "\n${BLUE}[$CURRENT_STEP/$TOTAL_STEPS] Running syntax checks...${NC}"

echo "→ ESLint..."
if ! pnpm lint > /dev/null 2>&1; then
    echo -e "${RED}❌ ESLint failed!${NC}"
    echo "Run: pnpm lint"
    pnpm lint || true
    exit 1
fi
echo -e "${GREEN}✓ ESLint passed${NC}"

echo "→ TypeScript..."
if ! pnpm typecheck > /dev/null 2>&1; then
    echo -e "${RED}❌ TypeScript errors!${NC}"
    echo "Run: pnpm typecheck"
    pnpm typecheck || true
    exit 1
fi
echo -e "${GREEN}✓ TypeScript passed${NC}"

echo "→ Prettier..."
if ! pnpm prettier --check "**/*.{ts,tsx,js,jsx,json,md}" > /dev/null 2>&1; then
    echo -e "${RED}❌ Formatting issues!${NC}"
    echo "Run: pnpm format"
    exit 1
fi
echo -e "${GREEN}✓ Formatting passed${NC}"

# Step 3: Build validation
CURRENT_STEP=$((CURRENT_STEP + 1))
echo -e "\n${BLUE}[$CURRENT_STEP/$TOTAL_STEPS] Validating builds...${NC}"
if ! pnpm build > /dev/null 2>&1; then
    echo -e "${RED}❌ Build failed!${NC}"
    echo "Run: pnpm build"
    exit 1
fi
echo -e "${GREEN}✓ Build successful${NC}"

# Step 4: Unit tests
CURRENT_STEP=$((CURRENT_STEP + 1))
echo -e "\n${BLUE}[$CURRENT_STEP/$TOTAL_STEPS] Running unit tests...${NC}"

echo "→ Frontend tests..."
if ! pnpm test:ci > /dev/null 2>&1; then
    echo -e "${RED}❌ Frontend tests failed!${NC}"
    echo "Run: pnpm test:ci"
    exit 1
fi
echo -e "${GREEN}✓ Frontend tests passed${NC}"

# Backend tests if available
if [ -f "services/api/requirements.txt" ] && [ -f "scripts/run-backend-tests-smart.sh" ]; then
    echo "→ Backend tests..."
    if ! bash scripts/run-backend-tests-smart.sh > /dev/null 2>&1; then
        echo -e "${RED}❌ Backend tests failed!${NC}"
        echo "Run: bash scripts/run-backend-tests-smart.sh"
        exit 1
    fi
    echo -e "${GREEN}✓ Backend tests passed${NC}"
fi

# Step 5: Performance checks
CURRENT_STEP=$((CURRENT_STEP + 1))
echo -e "\n${BLUE}[$CURRENT_STEP/$TOTAL_STEPS] Checking performance budgets...${NC}"
if [ -f "scripts/check-bundle-size.js" ]; then
    if ! node scripts/check-bundle-size.js > /dev/null 2>&1; then
        echo -e "${RED}❌ Bundle size exceeds limits!${NC}"
        echo "Runtime bundle must be < 30KB gzipped"
        node scripts/check-bundle-size.js || true
        exit 1
    fi
    echo -e "${GREEN}✓ Bundle sizes within limits${NC}"
fi

# Step 6: Contract tests
CURRENT_STEP=$((CURRENT_STEP + 1))
echo -e "\n${BLUE}[$CURRENT_STEP/$TOTAL_STEPS] Running contract tests...${NC}"
if ! pnpm test:contracts > /dev/null 2>&1; then
    echo -e "${RED}❌ Contract tests failed!${NC}"
    echo "Run: pnpm test:contracts"
    exit 1
fi
echo -e "${GREEN}✓ Contract tests passed${NC}"

# Step 7: Security audit
CURRENT_STEP=$((CURRENT_STEP + 1))
echo -e "\n${BLUE}[$CURRENT_STEP/$TOTAL_STEPS] Security audit...${NC}"
if pnpm audit --audit-level=high 2>&1 | grep -q "found.*high"; then
    echo -e "${YELLOW}⚠️  High severity vulnerabilities found${NC}"
    echo "Review with: pnpm audit"
    # Don't block on audit, but warn
fi
echo -e "${GREEN}✓ Security audit complete${NC}"

# Step 8: Final comprehensive check
CURRENT_STEP=$((CURRENT_STEP + 1))
echo -e "\n${BLUE}[$CURRENT_STEP/$TOTAL_STEPS] Running comprehensive validation...${NC}"

# Use the local test suite for final validation
if [ -f "scripts/local-test-suite.sh" ]; then
    echo "Running full test suite..."
    if bash scripts/local-test-suite.sh pre-push > .push-test-results.log 2>&1; then
        echo -e "${GREEN}✓ All validation passed${NC}"
    else
        echo -e "${RED}❌ Validation failed!${NC}"
        echo ""
        echo "See details in .push-test-results.log"
        tail -n 20 .push-test-results.log
        rm -f .push-test-results.log
        exit 1
    fi
    rm -f .push-test-results.log
else
    # Fallback aux tests de base
    echo "Exécution des tests de base..."
    if pnpm test:ci && pnpm build; then
        echo -e "${GREEN}✓ Validation de base passée${NC}"
    else
        echo -e "${RED}❌ Validation de base échouée!${NC}"
        exit 1
    fi
fi

# Summary
echo ""
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}✅ TOUS LES TESTS SONT PASSÉS!${NC}"
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo "Votre code est prêt à être poussé! 🚀"
echo ""

# Optionnel: Montrer ce qui sera poussé
echo "Vous allez pousser:"
git log --oneline @{upstream}..HEAD | head -5
echo ""

exit 0